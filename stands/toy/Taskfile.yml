version: '3'

set: [pipefail]

vars:
  STAND_TOY_PASSED: toy
  STAND_TOY_REVISION:
    sh: git write-tree --prefix=stands/toy
  STAND_TOY_REV: '{{.STAND_TOY_REVISION | trunc 7}}'

tasks:
  build:
    run: once
    env:
      REGISTRY: '{{.REGISTRY}}'
      SCHEMA_TAG: '{{.LIB_SCHEMA_REV}}'
      FOO_TAG: '{{.APP_FOO_REV}}'
    cmds:
      # deps
      - task: ::lib:schema:image
      - task: ::app:foo:image
      # wipes
      - task: wipe-db
      # actions
      - cmd: >
          docker compose
          --profile {{.DB_VENDOR}}
          up
          --detach
  test:
    run: once
    vars:
      COMMAND: '{{if eq .REGISTRY "localhost"}}inspect{{else}}pull{{end}}'
    status:
      - docker image {{.COMMAND}} {{.APP_FOO_REF}}-{{.STAND_TOY_PASSED}}
      - docker image {{.COMMAND}} {{.LIB_SCHEMA_REF}}-{{.STAND_TOY_PASSED}}
    cmds:
      # deps
      - task: ::lib:binary
      - task: build
      # actions
      - cmd: mvn test -Dlibs.version={{.LIBS_VERSION}}
      # proofs
      - task: approve
  approve:
    run: once
    internal: true
    cmds:
      - docker tag {{.LIB_SCHEMA_REF}} {{.LIB_SCHEMA_REF}}-{{.STAND_TOY_PASSED}}
      - docker tag {{.APP_FOO_REF}} {{.APP_FOO_REF}}-{{.STAND_TOY_PASSED}}
  publish:
    run: once
    preconditions:
      - sh: '[ "{{.REGISTRY}}" != "localhost" ]'
    cmds:
      - docker push {{.LIB_SCHEMA_REF}}-{{.STAND_TOY_PASSED}}
      - docker push {{.APP_FOO_REF}}-{{.STAND_TOY_PASSED}}
  wipe:
    run: once
    env:
      REGISTRY: '{{.REGISTRY}}'
      SCHEMA_TAG: '{{.LIB_SCHEMA_REV}}'
      FOO_TAG: '{{.APP_FOO_REV}}'
    cmds:
      - cmd: >
          docker compose
          --profile {{.DB_VENDOR}}
          down
          --volumes
  wipe-db:
    run: once
    internal: true
    status:
      - docker inspect schema-owner-{{.LIB_SCHEMA_REV}}
    cmds:
      - docker rm -f env-db
