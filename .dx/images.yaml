---
- import_playbook: binaries.yaml   # noqa: name[play]
  vars:
    maven_phase: "{{ 'install' if binary_storage == 'local' else 'deploy' }}"
  tags: [binaries, deps]

- name: Images
  hosts: schema
  run_once: true
  tasks:
    - name: Capture statuses
      ansible.builtin.command:
        cmd: docker {{ docker_entity }} inspect {{ schema.image.name }}:{{ schema.image.tag }}
      register: image_status
      changed_when: image_status.rc != 0
      failed_when: false
      loop: "{{ solution.schemas.values() }}"
      loop_control:
        loop_var: schema
        label: "{{ schema.name }}"
    - name: Status commands
      ansible.builtin.debug:
        msg: "{{ image_status.results|map(attribute='cmd')|map('join', ' ') }}"
      when: image_status is changed
    - name: Create images
      ansible.builtin.include_role:
        name: image
      vars:
        image_tag: "{{ schema.image.tag }}"
        image_name: "{{ schema.image.name }}"
        image_home: "{{ playbook_dir }}/../schemas/{{ solution.storage.vendor }}"
        image_push: "{{ image_storage != 'local' }}"
      loop: "{{ image_status.results|select('changed')|map(attribute='schema') }}"
      loop_control:
        loop_var: schema
        label: "{{ schema.name }}"

- name: Images
  hosts: app
  run_once: true
  tasks:
    - name: Analyze coverage
      ansible.builtin.command:
        cmd: >
          mvn
          --no-snapshot-updates
          --batch-mode
          --projects tools
          clean
          antrun:run@coverage
        chdir: "{{ playbook_dir }}/.."
        strip_empty_ends: false
      changed_when: true
      when: image_status is changed
    - name: Create images
      ansible.builtin.include_role:
        name: image
      vars:
        image_tag: "{{ image_cids[app.name][:7] }}-{{ devenv }}"
        image_name: "{{ app.image.name }}"
        image_home: "{{ playbook_dir }}/../apps/{{ app.binary.name }}"
        image_context: target/docker-context
        image_push: "{{ image_storage != 'local' }}"
        image_args:
          JAVA_RELEASE: "{{ dev[devenv].jdk.release }}"
      loop: "{{ image_status.results|select('changed')|map(attribute='app') }}"
      loop_control:
        loop_var: app
        label: "{{ app.binary.name }}"
      when: image_status is changed
