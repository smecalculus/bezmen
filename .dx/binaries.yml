---
- name: Binaries
  hosts: lib
  run_once: true
  tasks:
    - name: Create binaries
      ansible.builtin.command:
        cmd: >
          mvn
          --no-snapshot-updates
          --fail-fast
          --batch-mode
          --threads 1C
          clean
          {% if focus == 'solution' %}
          deploy
          {% else %}
          install
          {% endif %}
        chdir: "{{ playbook_dir }}/../libs"
      changed_when: true

- name: Binaries
  hosts: app
  run_once: true
  tasks:
    - name: Capture cid's
      ansible.builtin.command:
        cmd: git hash-object --stdin
        stdin: |
          {{ app_cids[app] }}
          {% for lib in app_deps[app] %}
          {{ lib_cids[lib] }}
          {% endfor %}
      # TODO: try to choose better name
      register: image_cid
      changed_when: false
      loop: "{{ app_images.keys() }}"
      loop_control:
        loop_var: app
      tags: [always]
    - name: Capture statuses
      ansible.builtin.command:
        cmd: docker {{ docker_entity }} inspect {{ app_images[item.app] }}:{{ item.stdout[:7] }}
      register: image_status
      changed_when: image_status.rc != 0
      failed_when: false
      loop: "{{ image_cid.results }}"
      loop_control:
        label: "{{ item.app }}"
      tags: [always]
    - name: Status commands
      ansible.builtin.debug:
        msg: "{{ image_status.results|map(attribute='cmd')|map('join', ' ') }}"
      when: image_status is changed
      tags: [always]
    - name: Create binaries
      ansible.builtin.command:
        cmd: >
          mvn
          --no-snapshot-updates
          --fail-fast
          --batch-mode
          --threads 1C
          --projects {{ image_status.results|select('changed')|map(attribute='item.app')|join(',') }}
          clean
          package
        chdir: "{{ playbook_dir }}/../apps"
        strip_empty_ends: false
      changed_when: true
      when: image_status is changed

#          {% if hostvars.lib.binary_status|default({}) is changed %}
#          --also-make
#          {% endif %}
#          {% if not up_to_images|default(false) %}
#          package
#          {% elif focus == 'pipeline' %}
#          install
#          {% else %}
#          deploy
#          {% endif %}

- name: Binaries
  hosts: test
  run_once: true
  tasks:
    - name: Create binaries
      ansible.builtin.command:
        cmd: >
          mvn
          --no-snapshot-updates
          --batch-mode
          clean
          test-compile
        chdir: "{{ playbook_dir }}/../tests"
        strip_empty_ends: false
      changed_when: true
