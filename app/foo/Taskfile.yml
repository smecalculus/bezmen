version: '3'

set: [pipefail]

vars:
  APP: foo
  APP_FOO_REVISION:
    sh: git write-tree --prefix=app/{{.APP}}
  APP_FOO_REV: '{{.APP_FOO_REVISION | trunc 7 }}'
  APP_FOO_VERSION: 0.1.0-{{.APP_FOO_REV }}
  APP_FOO_IMAGE: '{{.REGISTRY}}/smecalculus/{{.APP}}'

tasks:
  binary:
    status:
      - test -f target/{{.APP}}-{{.APP_FOO_VERSION}}.jar
    deps:
      - task: ::shared:binary
    cmds:
      - find . -name "*.jar" -type f -delete
      - mvn package -am -T1C -Drevision={{.APP_FOO_VERSION}}

  image-1:
    preconditions:
      - sh: '[ "{{.REGISTRY}}" = "localhost" ]'
    status:
      - docker image inspect {{.APP_FOO_IMAGE}}:{{.APP_FOO_REV}}
    deps:
      - task: binary
    cmds:
      - task: reset
      - cmd: >
          docker build target/docker-context
          -f Dockerfile
          -t {{.APP_FOO_IMAGE}}:{{.APP_FOO_REV}}

  image-2:
    preconditions:
      - sh: '[ "{{.REGISTRY}}" != "localhost" ]'
    vars:
      NAME: '{{.REGISTRY}}/smecalculus/{{.APP_FOO_IMAGE}}:{{.APP_FOO_REV}}'
    status:
      - docker pull {{.NAME}}
    cmds:
      - docker build -t {{.NAME}} .
      - docker push {{.NAME}}

  container-1:
    vars:
      NAME: '{{.APP}}-{{.APP_FOO_REV}}'
    status:
      - '$(docker container inspect -f {{"{{.State.Running}}"}} {{.NAME}})'
    deps:
      - task: image-1
      - task: ::shared:schema:owner
    cmds:
      - cmd: docker rm -f $(docker ps -aq --filter name={{.APP}}*) 2> /dev/null
        ignore_error: true
      - cmd: >
          docker run -d
          --name {{.NAME}}
          --net host
          --label ancestor={{.APP_FOO_IMAGE}}
          {{.APP_FOO_IMAGE}}:{{.APP_FOO_REV}}

  reset:
    internal: true
    cmds:
      - cmd: docker rm -f $(docker ps -aq -f label=ancestor={{.APP_FOO_IMAGE}}) 2> /dev/null
        ignore_error: true
      - cmd: docker rmi -f $(docker images -q --filter reference={{.APP_FOO_IMAGE}}*) 2> /dev/null
        ignore_error: true
