version: '3'

set: [pipefail]

vars:
  STAGE_VERIFICATION_STATUS: verified

tasks:
  run:
    run: once
    vars:
      APP_VERIFIED_REFS: >-
        {{- $status := .STAGE_VERIFICATION_STATUS}}
        {{- range .APP_USAGE_REFS | splitList " "}}{{printf "%s-%s " . $status}}{{end}}
      STAND_VERIFIED_REFS: >-
        {{- $status := .STAGE_VERIFICATION_STATUS}}
        {{- range .STAND_USAGE_REFS | splitList " "}}{{printf "%s-%s " . $status}}{{end}}
      TEST_VERIFIED_REFS: >-
        {{- $status := .STAGE_VERIFICATION_STATUS}}
        {{- range .TEST_USAGE_REFS | splitList " "}}{{printf "%s-%s " . $status}}{{end}}
    status:
      - docker {{.ENTITY}} inspect {{.LIB_SCHEMA_REF}}-{{.STAGE_VERIFICATION_STATUS}}
      - docker {{.ENTITY}} inspect {{.APP_VERIFIED_REFS}}
      - docker {{.ENTITY}} inspect {{.STAND_VERIFIED_REFS}}
      - docker {{.ENTITY}} inspect {{.TEST_VERIFIED_REFS}}
    cmds:
      - task: ::stand:run
        # TODO: ::lib:testing:binary
      - task: ::lib:binaries
        vars:
          SKIP_TESTS: true
      - task: ::test:run
  transit:
    run: once
    aliases: [ commit ]
    preconditions:
      - docker {{.ENTITY}} inspect {{.LIB_SCHEMA_REF}}
      - docker {{.ENTITY}} inspect {{.APP_FOO_REF}}
      - docker {{.ENTITY}} inspect {{.STAND_BASIS_REF}}
      - docker {{.ENTITY}} inspect {{.STAND_TOY_REF}}
      - docker {{.ENTITY}} inspect {{.STAND_FUNC_REF}}
      - docker {{.ENTITY}} inspect {{.TEST_TOY_REF}}
      - docker {{.ENTITY}} inspect {{.TEST_FUNC_REF}}
    cmds:
      - task: ::docker:image:tag
        vars:
          OLD: '{{.LIB_SCHEMA_REF}}'
          NEW: '{{.LIB_SCHEMA_REF}}-{{.STAGE_VERIFICATION_STATUS}}'
      - task: ::docker:image:push
        vars:
          REF: '{{.LIB_SCHEMA_REF}}-{{.STAGE_VERIFICATION_STATUS}}'
      - task: ::docker:image:tag
        vars:
          OLD: '{{.APP_FOO_REF}}'
          NEW: '{{.APP_FOO_REF}}-{{.STAGE_VERIFICATION_STATUS}}'
      - task: ::docker:image:push
        vars:
          REF: '{{.APP_FOO_REF}}-{{.STAGE_VERIFICATION_STATUS}}'
      - task: ::docker:image:tag
        vars:
          OLD: '{{.STAND_BASIS_REF}}'
          NEW: '{{.STAND_BASIS_REF}}-{{.STAGE_VERIFICATION_STATUS}}'
      - task: ::docker:image:push
        vars:
          REF: '{{.STAND_BASIS_REF}}-{{.STAGE_VERIFICATION_STATUS}}'
      - task: ::docker:image:tag
        vars:
          OLD: '{{.STAND_TOY_REF}}'
          NEW: '{{.STAND_TOY_REF}}-{{.STAGE_VERIFICATION_STATUS}}'
      - task: ::docker:image:push
        vars:
          REF: '{{.STAND_TOY_REF}}-{{.STAGE_VERIFICATION_STATUS}}'
      - task: ::docker:image:tag
        vars:
          OLD: '{{.STAND_FUNC_REF}}'
          NEW: '{{.STAND_FUNC_REF}}-{{.STAGE_VERIFICATION_STATUS}}'
      - task: ::docker:image:push
        vars:
          REF: '{{.STAND_FUNC_REF}}-{{.STAGE_VERIFICATION_STATUS}}'
      - task: ::docker:image:tag
        vars:
          OLD: '{{.TEST_TOY_REF}}'
          NEW: '{{.TEST_TOY_REF}}-{{.STAGE_VERIFICATION_STATUS}}'
      - task: ::docker:image:push
        vars:
          REF: '{{.TEST_TOY_REF}}-{{.STAGE_VERIFICATION_STATUS}}'
      - task: ::docker:image:tag
        vars:
          OLD: '{{.TEST_FUNC_REF}}'
          NEW: '{{.TEST_FUNC_REF}}-{{.STAGE_VERIFICATION_STATUS}}'
      - task: ::docker:image:push
        vars:
          REF: '{{.TEST_FUNC_REF}}-{{.STAGE_VERIFICATION_STATUS}}'
